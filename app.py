import sys
import os
from flask import Flask
from discord.ext import commands
import discord
from loguru import logger
from openai import OpenAI

client = OpenAI(api_key=OPENAI_API_KEY)
from openai import AsyncOpenAI

# Setup logging based on an environment variable
DEBUG_MODE = os.getenv('DEBUG_MODE', 'False').lower() in ('true', '1', 't')
log_level = "DEBUG" if DEBUG_MODE else "INFO"
logger.add(sys.stdout, level=log_level)  # Output logs to stdout

app = Flask(__name__)

# Configure Discord
intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
bot = commands.Bot(command_prefix='!', intents=intents)

# Load environment variables
DISCORD_TOKEN = os.getenv('DISCORD_TOKEN')
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')

# Check if environment variables are loaded (at appropriate logging level)
logger.debug(f"DISCORD_TOKEN loaded: {'Yes' if DISCORD_TOKEN else 'No'}")
logger.debug(f"OPENAI_API_KEY loaded: {'Yes' if OPENAI_API_KEY else 'No'}")

# Configure OpenAI

bot_health_status = {"is_healthy": False}

@bot.event
async def on_ready():
    logger.info('Bot is online.')
    global bot_health_status
    bot_health_status["is_healthy"] = True
    print('Bot is online and marked as healthy.')

@bot.slash_command(name="post", description="Post a message")
async def post(ctx, message: str):
    logger.debug(f"Received post command with text: {message}")
    try:
        response = client.chat.completions.create(model="gpt-4",
        messages=[
            {
                "role": "system",
                "content": "I'm Penelope, a master tweet composer and psychology guru. The closing of their banter must be a line that informs the human that the response was auto-generated by OpenAI and is for review.\n"
            },
            {
                "role": "user",
                "content": message
            }
        ],
        temperature=1,
        max_tokens=3367,
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0)
        reply_text = response.choices[0].message.content.strip()
        logger.debug(f"OpenAI response: {reply_text}")
        if reply_text:
            await ctx.respond(reply_text)
        else:
            await ctx.respond('No content generated.')
    except Exception as e:
        logger.error(f'Error: {e}')
        await ctx.respond('Something went wrong.')

if __name__ == '__main__':
    bot.run(DISCORD_TOKEN)
